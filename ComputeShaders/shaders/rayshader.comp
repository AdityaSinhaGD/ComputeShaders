#version 430 compatibility

uniform vec3 rayOrigin;
uniform vec3 spherePosition; 
uniform float sphereRadius;

layout (std430, binding = 4) buffer Pos
{
	vec4 Positions [ ];
};



layout (std430, binding = 6) buffer Col 
{
	vec4 Colors [ ];
};



layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;


void main()
{
	const vec3 G = vec3 (0.0f, -9.8f, 0.0f);
	uint g_id = gl_GlobalInvocationID.x;

	vec3 pos = Positions[g_id].xyz;
	vec3 color = Colors[g_id].xyz;

	vec3 raydirection = normalize(pos-rayOrigin);
	vec3 oc = (rayOrigin - spherePosition);

	float a = dot(raydirection,raydirection);
	float b = 2.0*dot(oc,raydirection);
	float c = dot(oc,oc) - sphereRadius*sphereRadius;

	float discriminant = b*b - 4*a*c;

	if(discriminant<0)
	{
		color = Colors[g_id].xyz;
	}else{

		color = vec3(0.5,0.0,0.0);		
	}

	Colors[g_id].xyz = color;
	
}

